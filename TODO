
######################################################################

Time
####

Clean up time handling. At the moment we have times from midnight, times
from start of run, times from time of restarted run, time within
condensation timestep, etc.

Change times in the env_data arrays to be seconds since midnight on
start_day, so we can easily change start_time without needing to
rewrite all the emit/height/etc data. It makes more sense for these to
be absolute real times, rather than relative to start of
simulation. Would also help with restarted simulations.

Add env%day_of_year (days since jan 1) and env%time_of_day (secs since
midnight) and shift info on start day, start time, etc to
env_data. Change mosaic_timestep() to just read time/day info out of
env directly. Update this info in env_data_update_state(). Should
probably store full date/time info, with timezone as +-HH:MM, etc.

Add separate del_t for mosaic, coag, and cond. Check on input that
t_output, etc are multiples of del_t so that the n_time header
information is actually correct.

######################################################################

MPI
###

All mpi_recv calls should use MPI_TAG_ANY and MPI_SOURCE_ANY but then
assert() that they are correct, so that we die rather than
deadlocking.

Change gas mixing to be by diffusion, rather than allreduce, also env.

Switch to using mpi structures rather than pack/unpack?

In aero_state_mix(), if expected number of particles to send to each
other processor is less than one, switch to a
"send-individual-particles" mode, which should be more efficient.

######################################################################

Build
#####

Sometimes cmake seems to rebuild even if no source files have changed
at all? Maybe has to do with the fact that the module files are being
put into the build/ directory?

######################################################################

Add entrainment switch as a function of time.

Implement a better poisson distribution generator. We should probably
generate a poisson sample per-bin, rather than doing a total sample
and then using a slow sampling to pick samples one-by-one.

Fix calling convention for aerosol_optical from mosaic.f90. Do we do
it every timestep, or just when needed, or what? What about
coagulation? Does this come in the right order? We should really be
able to do aerosol_optical as a post-processing step.

Change numeric_average.f90 to be numeric_reduce.f90 with option
"mean", "stddev", "min", "max", "median", "perc_rank" (percentile
rank).

Change sample_disc_pdf() and sample_cts_pdf() to use cumulative
distributions.

Don't store paricles as ragged array, but just as a flat list. For
coagulation, pre-compute the bin structures as needed on every
timestep, which we have to do if we are using chemistry or
condensation anyway.

Store all events (particle loss, creation, coagulation, etc) in the
output file, to allow detailed post-processing. Record full
information for each event, including the complete state of all
involved particles (e.g., before and after coagulation states).

Add new run-mode to make an output directory, copy input files into
it, etc. Not so easy, given that fortran has no mkdir. We could call
the C mkdir() directly, or via our own C code (probably easier to
match mode_t types, etc), but requires Fortran 2003.

Change "rate" line in gas_profile/aero_profile to be "scaling" (so it
makes sense for background as well), or just delete it. Will need to
add a dilution rate profile somewhere --- better anyway to unify it.

Separate out numerical parameters into
run_part_opt/run_sect_opt/run_exact_opt and scenario parameters into
another structure (to replace env_data --- maybe call it
scenario_t). Add spec_file_read_run_part_opt() etc to input the
numerical parameters.

Shift spec file reading into run_part.F95, etc. Have a
spec_file_read_run_part() or similar, that just takes a filename. The
main partmc program would then just read the first line of the file,
close it, then call the correct run_*() reader. This would enable
other driver programs to be easily written. run_part() should also
take a callback function, with a t_callback timestep parameter, to
enable in-run processing.

Switch to allocatable structure members, rather than pointers. Also
test for allocated() inside my_type_allocate(), and deallocate first
if needed. Then don't need to deallocate before allocating in
subroutines. Then don't need to pre-allocate before calling
subroutines which are just going to reallocate anyway. Will need to
clearly indicate which procedures can be passed unallocated
structures.

Fix sources to work with MPI.

Integrate aero_particle_array into aero_state? Rename aero_state%p in
any case. Probably best to rename aero_state%p to aero_state%particle
and aero_particle_array%n_part to n_entry and
aero_particle_array%particle to entry.

Don't specify a bin grid in the spec file; work it out automatically
in run_part.

Change check_event() to always return false if the t_freq is 0, so
run_part can change to not testing this itself.

Brownian kernel depends on pressure, temperature, etc. Does this hurt
k_max?

Rename aero_sorted to aero_sort.

Parallel method should just generate n_samp for all pairs, then
request these as blocks, not one-by-one. Also, don't bother sending
coagulation products to other processors, just keep them. Can we
analyze how expensive this is, compared to mixing?

In bin_grid_particle_in_bin, warn if a particle is beyond r_min,
r_max.

We could ensure that bin_grids are always aligned to same base grid,
so that when we extend the bin_grid, we don't need to recompute the
sort, and we only need to recompute some parts of k_max.

Don't synchronize aero_state_rebalance() across all processes --- just
do it locally. This will mess up things like 32 parts/proc, but will
work well for large n_part/proc.

Rename valid_sort -> sort_valid.

Fix aero_state structure documentation.

Change aero_particle_allocate_size() to just take aero_data, not
individual n_*.

Change constants to use format 3_dp rather than 3d0.

Change kind=dp to kind=wp for "working precision".

Fix aero_state%p naming.

Document aero_state%p and aero_state%aero_sorted in aero_state_t.

Change aero_weight to aero_weight_array where appropriate.

Add sorting check code for unif_bin.

Add a just-sorted-by-group sorting.

Make numeric_diff work even with extra spaces at the end of lines.

Shift aero_data inside aero_state, like in partmc.py, to avoid having
to remember when to pass it around.
