
Add implicit, adaptive timestepping for the condensation ODE solver.

The initialization routines in init_dist.f are assuming
logarithmically spaced bins, irrespective of what bin_r and bin_v
actually contain. dlnr is the width of a bin in the logarithmic scale,
and we just multiply this by the density to get the number per bin. We
should instead multiply the density by ln(bin_right_edge) -
ln(bin_left_edge) or similar. In general, we should stop passing dlnr
around, as it should be recalculable from bin_r for each bin.

Use HDF or CDF or something to store state. (and output?)

Get a better bessel function so that we can compute the exact golovin
solution for larger arguments.

Make a bin structure to store all the bin data. Add bin_edges so that
we have bin_centers and bin_edges. Use a 1D_search to locate particle
in bin. Compute the bin_centers and bin_edges using something like
logspace(1e-24,1e-4,160), rather than always assuming logarithmically
spaced bins.

We keep track of M all the time (total number of particles). Should we
just recalc from sum(MH) when we need it? When do we even need it?
Just for progress display and to test the need for double?

Specify number of particles in the main .spec file and then for each
mode specify only the the number concentration. This would also permit
the sectional code to be run with an arbitrary sum of initial modes.

Cache bin edges in bin_grid

make_bin_grid should take r_min, r_max and n_bin

remove bin_dist and use aero_dists instead. change aero_dist to
directly store density per species, rather than vol_frac. change
aero_mode_t to just be a 2D array per bin/species.

rename environ to env_t

treat bin_dist just as a summary thing. have something in
output_summary that computes the summary data and outputs it.

write proper serialization code for all objects. change
read/write_state() to use it.

use size(array,dim) rather than shape()

add inout_read_named_real_array() and similar to do what
read_real_array() does in read_spec.f90 now, then separate out the
spec_*() functions for compound datatypes into the respective files
