
Add implicit, adaptive timestepping for the condensation ODE solver.

The initialization routines in init_dist.f are assuming
logarithmically spaced bins, irrespective of what bin_r and bin_v
actually contain. dlnr is the width of a bin in the logarithmic scale,
and we just multiply this by the density to get the number per bin. We
should instead multiply the density by ln(bin_right_edge) -
ln(bin_left_edge) or similar. In general, we should stop passing dlnr
around, as it should be recalculable from bin_r for each bin.

Use HDF or CDF or something to store state. (and output?)

Get a better bessel function so that we can compute the exact golovin
solution for larger arguments.

Implement a better poisson distribution generator. We should probably
generate a poisson sample per-bin, rather than doing a total sample
and then using a slow sampling to pick samples one-by-one.

Add bin edges to bin_grid. Use a 1D_search to locate particle in
bin. Compute the bin_centers and bin_edges using something like
logspace(1e-24,1e-4,160), rather than always assuming logarithmically
spaced bins.

make_bin_grid should take r_min, r_max and n_bin

rename environ to env_t

check that each top-level data_type is in the file data_type.f90 with
a module mod_data_type.

use size(array,dim) rather than shape()

convert all num_conc and similar to num_den or similar

stop passing bin_grid and aero_data around just to get n_bin and
n_spec. Instead derive on the spot from array sizes.

split singlestep_mosaic() to an _init() and the real _step() thing.

add separate del_t for mosaic, coag, and cond.

add error checking to inout_write_*()

Make time a field in env and set it in environ_init() and
environ_update().

rename env%{T,RH,p,rho_a} to temp, rel_hum, press, dens or something

aero_binned is really storing #/dln(m)/m^3 or something?

memory leaks: all types should have alloc_*() and free_*() functions
and should call them.

rewrite coagulation and aero_state() functions to use
aero_state_add_particle(), aero_state_remove_particle(), etc.

pass full particle data to the kernel_*() functions so that we can do
proper density-dependent brownian kernels. Requires a separate
max_kernel_*() function for each one.

Make a type(particle_t) with a pointer to the data.

Add a field to particle_t to track number of coagulation events.

Fix process_state.

Rename golovin to additive.

