Should we auto-remake Makefile.deps or not?

Rename mc_exact() -- it isn't an MC at all!

Pass n_loop into mc_fix_hybrid so that we can do a better time estimation.

Write a run_exact that process spec files too.

Separate out utility code from run_mc.f to read_spec.f

Fix problem with tabs in files read by run_mc.

Make process_out and process_state use allocatable arrays.

Make process_state not need to have everything set inside it.

Remove n_ini in all the run* files to avoid confusion. Just use bin_n instead.

Make process_out and process_state do dynamic allocation of arrays
after reading size information from the file.

Change naming of state_XXXX.d to include sedi/brown/whatever

Rename read_state to read_state_hybrid and also write_state.

Remove debug code in cond_growth_rate_func()

Replace pi with const%pi

Remove old style parameter declarations
Reformat parameter description comments and remove double spaces

Stop using magic file number 30 for the output file.

Add a "make test" to run everything and compare the output files of
various things.

Rename t_print to t_output

Change endif/enddo to end if/end do

Make sure all functions have a description at the top of them

Remove dT/dt from env and pass mc_fix_hybrid a list of times and
temps, so that it can do linear interpolation to set the
temperature. Write a function in util.f to actually do the linear
interpolation.

Rename bin_r, bin_v, bin_g, bin_n to make it clear that bin_r/bin_v
are the independent variables, while bin_g/bin_n are the dependent
variables.

rho_a should be shifted from constants to environ
check whether atm should also shift from constants to environ

clean up the whole particle_vol_hybrid(), particle_vol(),
particle_vol_base(), particle_volume() thing

also output bin_v in state

-----------------------------------------------------------------------------

Add adaptive timestepping for the condensation ODE solver.

Add implicit timestepping for the condensation ODE solver.

The initialization routines in init_dist.f are assuming
logarithmically spaced bins, irrespective of what bin_r and bin_v
actually contain. dlnr is the width of a bin in the logarithmic scale,
and we just multiply this by the density to get the number per bin. We
should instead multiply the density by ln(bin_right_edge) -
ln(bin_left_edge) or similar. In general, we should stop passing dlnr
around, as it should be recalculable from bin_r for each bin.

use HDF or CDF or something to store state

get a better bessel function so that we can compute the exact golovin
solution for larger arguments.

Make a bin structure to store all the bin data. Add bin_edges so that
we have bin_centers and bin_edges. Use a 1D_search to locate particle
in bin. Compute the bin_centers and bin_edges using something like
logspace(1e-24,1e-4,160).

We keep track of M all the time (total number of particles). Should we
just recalc from sum(MH) when we need it?

