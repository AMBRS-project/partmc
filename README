
PartMC - Particle-resolved Monte Carlo code for atmospheric aerosol simulation

Version 1.1.0
Released 2007-07-??

http://tableau.stanford.edu/~mwest/group/PartMC
http://carrot.msrc.sunysb.edu/~nicole/research/montecarlo/

Copyright (C) 2005-2007 Nicole Riemer, Matthew West
Portions copyright (C) Andreas Bott
Distributed under the GPL (see the file COPYING)


INSTALLATION
------------

By default the Makefile will use gfortran (tested on Linux with gcc
4.1.2 and OS X with gcc 4.2.0).

To use Portland Group compilers run with "make FC=pgf95" (tested with
pgf95 6.0-8 on x86-64 Linux).

The Makefile requires GNU make (tested with versions 3.79.1 and 3.80).

make_mod_deps.py requires Python (tested with version 2.4.2).


USAGE
-----

The main partmc command reads .spec files and does the run specified
therein. Either Monte Carlo runs, sectional code runs, or exact
solutions can be generated. A run produces binned summary data which
can be processed with process_summary to generate simple files that
gnuplot can plot. Monte Carlo runs can also output the full internal
state that can then be processed with process_state.

There are a number of examples provided in the test directory that can
be run by the *.sh scripts. These use gnuplot to plot the results.


CODING CONVENTIONS
------------------

The code is mainly Fortran 90, with a few parts still clearly showing
their Fortran 77 heritage.

Extensive use is made of Fortran 90 derived types and pointers for
dynamic memory allocation of arrays inside derived types. Derived
types are named like my_type_t and are generally defined in modules
named like pmc_mod_my_type within files like my_type.f90. Each derived
type has allocation and deallocation functions my_type_alloc() and
my_type_free(), respectively.

The auto-generation of module dependencies relies on a particular
naming convention. The module names must be the same as the name of
the containing file, but prefixed with "pmc_mod_". Thus the module
pmc_mod_condensation is contained in the file condensation.f. The
dependencies are autogenerated by the make_mod_deps.py Python program,
which is called automatically by the Makefile.


DEBUGGING
---------

To debug the parallel code run it with:
om-mpiexec --mca mpi_abort_delay -1 -n 2 ../src/partmc golovin_mc.spec 
then run the debugger with:
gdb ../src/partmc <pid>
and use "bt" to get a backtrace.


CHANGELOG
---------

1.1.0 - 2007-07-??

  * Internal reorganization to use Fortran 90 derived types for the
    data structures.

  * Integration with the MOSAIC gas- and aerosol-chemistry code.

  * Parallel implementation using mixing.

1.0.0 - 2007-02-26

  * First release, including hierarchical coagulation and full water
    condensation.
