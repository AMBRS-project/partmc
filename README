
PartMC
======

PartMC: Particle-resolved Monte Carlo code for atmospheric aerosol simulation

Version 2.0.0  
Released 2011-01-05

<http://lagrange.mechse.illinois.edu/mwest/partmc/>

References:

   * N. Riemer, M. West, R. A. Zaveri, and R. C. Easter (2009),
     Simulating the evolution of soot mixing state with a
     particle-resolved aerosol model, J. Geophys. Res. 114(D09202),
     <http://dx.doi.org/10.1029/2008JD011073>.
   * N. Riemer, M. West, R. A. Zaveri, and R. C. Easter (2010),
     Estimating black carbon aging time-scales with a
     particle-resolved aerosol model, J. Aerosol Sci. 41(1), 143-158,
     <http://dx.doi.org/10.1016/j.jaerosci.2009.08.009>.
   * R. A. Zaveri, R. C. Easter, J. C. Barnard, N. Riemer, and M. West
     (2010), Particle-resolved simulation of aerosol size,
     composition, mixing state, and the associated optical and cloud
     condensation nuclei activation properties in an evolving urban
     plume, J. Geophys. Res. 115(D17210),
     <http://dx.doi.org/10.1029/2009JD013616>.

Copyright (C) 2005-2011 Nicole Riemer and Matthew West  
Portions copyright (C) Andreas Bott and Richard Easter  
Licensed under the GNU General Public License version 2 or (at your
option) any later version.  
For details see the file COPYING or
<http://www.gnu.org/licenses/old-licenses/gpl-2.0.html>.


Dependencies
============

Required dependencies:

   * Fortran 95 compiler
   * cmake version 2.6.4 or higher - <http://www.cmake.org/>
   * NetCDF - <http://www.unidata.ucar.edu/software/netcdf/>

Optional dependencies:

   * MOSAIC - Available from Rahul Zaveri - <Rahul.Zaveri@pnl.gov>
   * MPI - <http://www.open-mpi.org/>
   * GSL - <http://www.gnu.org/software/gsl/>
   * SUNDIALS - <http://www.llnl.gov/casc/sundials/>
   * gnuplot - <http://www.gnuplot.info/>

PartMC can be compiled out-of-the-box on Linux if the following
packages are installed:

   * Fedora 14: `gcc-gfortran`, `cmake`, `netcdf-devel`, `gnuplot`
   * Ubuntu 10.04: `gfortran`, `cmake-curses-gui`, `libnetcdf-dev`, `gnuplot`
   * openSUSE 11.3: `gcc-fortran`, `cmake`, `libnetcdf-devel`, `gnuplot`
   * Debian 5.0: `gfortran`, `make`, `cmake`, `libnetcdf-dev`, `gnuplot`


Installation
============

In principle PartMC should compile under any modern OS. Testing has
mainly been under Linux and OS X. The quick-start instructions are:

1. Install cmake and NetCDF (see above). The NetCDF libraries are
   required to compile PartMC. The `netcdf.mod` Fortran 90 module file
   is required, and it must be produced by the same compiler being
   used to compile PartMC.

2. Unpack PartMC:

        tar xzvf partmc-2.0.0.tar.gz

3. Change into the main PartMC directory (where this README file is
   located):

        cd partmc-2.0.0

4. Make a directory called `build` and change into it:

        mkdir build
        cd build

5. Run cmake with the main PartMC directory as an argument (note the
   double-c):

        ccmake ..

6. Inside ccmake press `c` to configure, edit the values as needed,
   press `c` again, then `g` to generate.

7. Compile PartMC and test it as follows. Some tests may fail due to
   bad random initial conditions, so re-run the tests a few times to
   see if failures persist.

        make
        make test

8. To run just a single set of tests do something like:

        ctest -R poisson # argument is a regexp for test names

9. To see what make is doing run it like:

        VERBOSE=1 make

10. To run tests with visible output or to make some plots from the
    tests run them as:

        cd test_run/emission
        ./test_emission_1.sh
        ./test_emission_2.sh
        ./test_emission_3.sh            # similarly for other tests
        gnuplot -persist plot_species.gnuplot # etc...

11. To run full scenarios, do, for example:

        cd ../scenarios/1_urban_plume
        ./run.sh

PartMC can interface to the MOSAIC chemistry code (see above for
availability) but this is not enabled by default. This version of
PartMC has been tested with the `mosaic-2011-01-02` version. To use
MOSAIC, set the `ENABLE_MOSAIC` variable to `ON` in cmake. The
`MOSAIC_INCLUDE_DIR` variable should be the location of the MOSAIC
module files (compiled with the same compiler), probably ending in
`mosaic/datamodules`. The `MOSAIC_LIB` variable should end in
something like `mosaic/libmosaic.a`.

 These variables will be set
automatically if, before running `cmake`, the environment variable
`MOSAIC_HOME` is set. For example:

     export MOSAIC_HOME=${HOME}/subversion/mosaic/trunk   # for bash
     setenv MOSAIC_HOME ${HOME}/subversion/mosaic/trunk   # for tcsh

Rather than using the builtin random number intrinsics of the Fortran
compiler, PartMC can alternatively use the GSL library for random
number generation and distribution sampling. To enable this, set the
`ENABLE_GSL` variable to `ON` and set the `GSL_INCLUDE_DIR` and
`GSL_LIB` variables to the correct values.

The condensation code in PartMC requires SUNDIALS version 2.4.0 (not
enabled by default). To use it, set the `ENABLE_SUNDIALS` variable to
`ON`. The `SUNDIALS_CVODE_LIB` variable should be the location of the
`libsundials_cvode` library, the `SUNDIALS_NVECSERIAL_LIB` variable
should be the location of the `libsundials_nvecserial` library, and
`SUNDIALS_INCLUDE_DIR` should be the base directory that contains the
cvode header directory.

To compile PartMC to enable parallel execution with MPI, set the
`ENABLE_MPI` variable to `ON`. Then in the advaced mode section of
cmake set the `CMAKE_Fortran_COMPILER` to `mpif90` (or other MPI
compiler wrapper as appropriate) and reconfigure cmake. The `partmc`
executable should then be lauched with `mpirun -np 2 partmc` or
similar.

Using SUNDIALS or GSL requires linking C libraries with the Fortran
2003 C Interoperability mechanisms. This requires both a Fortran
compiler supporting the Fortran 2003 `ISO_C_BINDING` intrinsic module,
as well as a C compiler.

To aid CMake in its search for include directories and libraries,
various environment variables can be set _before_ running `ccmake` for
the first time. If the command `echo $SHELL` is `bash` or similar,
then the environment variables can be set, for example, like:

    export NETCDF_HOME=/
    export MOSAIC_HOME=${HOME}/subversion/trunk
    export SUNDIALS_HOME=${HOME}/opt
    export GSL_HOME=${HOME}/opt

If `echo $SHELL` instead is `tcsh` or similar, then the environment
variables can be set with:

    setenv NETCDF_HOME /
    setenv MOSAIC_HOME ${HOME}/subversion/trunk
    setenv SUNDIALS_HOME ${HOME}/opt
    setenv GSL_HOME ${HOME}/opt


Usage
=====

The main `partmc` command reads `.spec` files and does the run
specified therein. Either particle-resolved runs, sectional-code runs,
or exact solutions can be generated. A run produces one NetCDF file
per output timestep, containing per-particle data (from
particle-resolved runs) or binned data (from sectional or exact
runs). The `extract_*` programs can read these per-timestep NetCDF
files and output ASCII data (the `extract_sectional_*` programs are
used for sectional and exact model output).


ChangeLog
=========

2.0.0 - 2011-01-05

  * Parallel implementations based on remote particle access.

  * Added restart capability from NetCDF state files.

  * Added partmc.py library for python-based analysis of PartMC output
    files.

  * Reimplemented water condensation to be much faster and also correct.

  * Nucleation added with parameterization due to Kuang, McMurray, et al.

  * Weighted particles, with full support for coagulation and MOSAIC.

  * Changed to Poisson sampling for coagulation test number.

  * Input and output now use diameter everywhere rather than radius.

  * `urban_plume2` test-case added, as described in the paper
     <http://dx.doi.org/10.1029/2009JD013616>.

1.2.0 - 2009-06-15

  * Output of full per-particle data in NetCDF format.

  * `urban_plume` test-case added, as described in the paper
    <http://dx.doi.org/10.1029/2008JD011073>.

  * Build system switched to `cmake`.

  * Automated test suite added (`make test`).

1.1.0 - 2008-02-17

  * Internal reorganization to use Fortran 90 derived types for the
    data structures.

  * Integration with the MOSAIC gas- and aerosol-chemistry code.

  * Output is in binary NetCDF format.

  * Parallel implementation using 1D mixing.

1.0.0 - 2007-02-26

  * First release, including hierarchical coagulation and full water
    condensation.
