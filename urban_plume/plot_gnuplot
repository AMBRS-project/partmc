#!/usr/bin/env python
# Copyright (C) 2007 Matthew West
# Licensed under the GNU General Public License version 2 or (at your
# option) any later version. See the file COPYING for details.

import os, sys, re

def print_usage():
    print """plot <datafile_aero_binned.d> <unit> <species> <indices...>
plot <datafile_aero_total.d> <unit> <species...>
plot <datafile_gas.d> <species...>
plot <datafile_env.d> <fields...>

Plots the time history of the given species.

<unit> must be one of:
  num  - number density
  vol  - volume density
  mass - mass density
  mole - molar density

<species> is of list of species numbers or names (not needed for
number density).

<indices> is a list of time indices starting from 0.

For binned distributions <species> must be just one species. If it is
"total" then the total density is plotted.

<fields> for environment data must be one of:
  t  - temperature
  rh - relative humidity
  p  - pressure
  h  - height
At most two <fields> are allowed.
"""

def process_args():
    if len(sys.argv) < 2:
	print_usage()
	sys.exit(1)
    data_filename = sys.argv[1]
    unit = ""
    times = []
    species = []
    env = []
    if re.compile("_aero_binned").search(data_filename):
	type = "aero_binned"
	if len(sys.argv) < 5:
	    print_usage()
	    sys.exit(1)
	unit = sys.argv[2].lower()
	if unit not in ['num', 'vol', 'mass', 'mole']:
	    print "ERROR: unknown unit: %s" % unit
	    print
	    print_usage()
	    sys.exit(1)
	species = [sys.argv[3]]
	if species[0].lower() == "total":
	    species = []
	if (unit == "num") and (species != []):
	    print "ERROR: can only plot total for number density"
	    sys.exit(1)
	times = sys.argv[4:]
    elif re.compile("_aero_total.d").search(data_filename):
	type = "aero_history"
	if len(sys.argv) < 3:
	    print_usage()
	    sys.exit(1)
	unit = sys.argv[2].lower()
	if unit not in ['num', 'vol', 'mass', 'mole']:
	    print "ERROR: unknown unit: %s" % unit
	    print
	    print_usage()
	    sys.exit(1)
	if unit == "num":
	    if len(sys.argv) > 3:
		print "ERROR: for number density no species should be specified"
		print
		print_usage()
		sys.exit(1)
	else:
	    if len(sys.argv) < 4:
		print_usage()
		sys.exit(1)
	species = sys.argv[3:]
    elif re.compile("_gas").search(data_filename):
	type = "gas_history"
	if len(sys.argv) < 3:
	    print_usage()
	    sys.exit(1)
	species = sys.argv[2:]
    elif re.compile("_comp_gnuplot").search(data_filename):
	type = "comp_gnuplot"
	if len(sys.argv) > 2:
	    print_usage()
	    sys.exit(1)
    elif re.compile("_comp_total.d").search(data_filename):
	type = "comp_total"
	if len(sys.argv) > 2:
	    print_usage()
	    sys.exit(1)
    elif re.compile("_comp.d").search(data_filename):
	type = "comp"
	if len(sys.argv) > 2:
	    print_usage()
	    sys.exit(1)
    elif re.compile("_env").search(data_filename):
	type = "env"
	if (len(sys.argv) < 3):
	    print_usage()
	    sys.exit(1)
	for e in sys.argv[2:]:
	    env.append(e)
    elif re.compile("_n_orig_part_gnuplot").search(data_filename):
	type = "n_orig_part_gnuplot"
	if len(sys.argv) > 2:
	    print_usage()
	    sys.exit(1)
    elif re.compile("_n_orig_part.d").search(data_filename):
	type = "n_orig_part"
	if len(sys.argv) > 2:
	    print_usage()
	    sys.exit(1)
    else:
	print "ERROR: unknown plot type"
	sys.exit(1)
    return (type, data_filename, unit, species, times, env)

def get_species_names(data_filename, type):
    f = open(data_filename)
    if not f:
	print "ERROR: unable to open %s" % data_filename
	sys.exit(1)
    if type == "aero_binned":
	f.readline()
	f.readline()
	f.readline()
	f.readline()
    if type == "aero_history":
	f.readline()
	f.readline()
    f.readline()
    f.readline()
    header = f.readline()
    f.close()
    if header[0] != '#':
	print "ERROR: header does not start with #: %s" % header
	sys.exit(1)
    cols = header[1:].split()
    if (type == "aero_history") or (type == "aero_binned"):
	species = []
	spec_re = re.compile("^\d+-VL/(.+)$")
	for col in cols:
	    match = spec_re.search(col)
	    if match:
		species.append(match.group(1))
    elif type == "gas_history":
	species = cols[1:]
    else:
	print "ERROR: unknown type: %s" % type
	sys.exit(1)
    return species

def normalize_species(species, species_names):
    species_nums = []
    error = False
    n = 0
    for s in species:
	try:
	    n = int(s)
	    if (n < 1) or (n > len(species_names)):
		error = True
		print "ERROR: species number out of range: %d" % n
	except ValueError:
	    found = False
	    for i in range(len(species_names)):
		if s.lower() == species_names[i].lower():
		    found = True
		    n = i + 1
		    break
	    if not found:
		error = True
		print "ERROR: unknown species: %s" % s
	species_nums.append(n)
    if error:
	sys.exit(1)
    species_nums.sort()
    return species_nums

def normalize_times(times):
    times_nums = []
    error = False
    n = 0
    for i in times:
	try:
	    n = int(i)
	    if (n < 0):
		error = True
		print "ERROR: index number out of range: %d" % n
	except ValueError:
	    error = True
	    print "ERROR: unknown index: %s" % i
	times_nums.append(n)
    if error:
	sys.exit(1)
    times_nums.sort()
    return times_nums

def normalize_env(env):
    norm_env = []
    error = False
    for e in env:
	if e.lower() not in ["t", "rh", "p", "h"]:
	    error = True
	    print "ERROR: unknown environment field: %s" % env[0]
	norm_env.append(e.lower())
    if error:
	sys.exit(1)
    return norm_env

def print_species_table(species_nums, species_names):
    col = 0
    for i in species_nums:
	print ("%5d %-15s" % (i, species_names[i-1])),
	col += 1
	if col == 3:
	    print
	    col = 0
    if col != 0:
	print

def plot_aero_binned(f, data_filename, unit, species_nums, species_names,
		     times):
    f.write('set logscale\n')
    f.write('set xlabel "radius (m)"\n')
    if unit == "num":
	f.write('set ylabel "aerosol number density (#/m^3)\n')
    elif unit == "vol":
	f.write('set ylabel "aerosol volume density (m^3/m^3)\n')
	offset = 2
    elif unit == "mass":
	f.write('set ylabel "aerosol mass density (kg/m^3)\n')
	offset = len(species_names) + 2
    elif unit == "mole":
	f.write('set ylabel "aerosol molar density (mole/m^3)\n')
	offset = 2 * len(species_names) + 2
    else:
	print "ERROR: unknown unit: %s" % unit
	sys.exit(1)
    f.write('set title "aerosol size distributions"\n')
    if species_nums == []:
	first_time = True
	for i in times:
	    if first_time:
		plot = "plot"
		first_time = False
	    else:
		plot = "replot"
	    if unit == "num":
		yval = "2"
	    else:
		yval = "(" + "+".join([("$%d" % (n+offset+1))
				      for n in range(len(species_names))]) \
				      + ")"
	    f.write((plot + ' "%s" index %d using 1:%s'
		     + ' title "total (index %d)" with lines\n')
		    % (data_filename, i, yval, i))
    else:
	first_time = True
	for i in times:
	    if first_time:
		plot = "plot"
		first_time = False
	    else:
		plot = "replot"
	    f.write((plot + ' "%s" index %d using 1:%d'
		     + ' title "%s (index %d)" with lines\n')
		    % (data_filename, i, species_nums[0] + offset,
		       species_names[species_nums[0] - 1], i))

def plot_aero_history(f, data_filename, unit, species_nums, species_names):
    f.write('set xlabel "time (hr)"\n')
    if unit == "num":
	f.write('set ylabel "aerosol number density (#/m^3)\n')
    elif unit == "vol":
	f.write('set ylabel "aerosol volume density (m^3/m^3)\n')
	offset = 2
    elif unit == "mass":
	f.write('set ylabel "aerosol mass density (kg/m^3)\n')
	offset = len(species_names) + 2
    elif unit == "mole":
	f.write('set ylabel "aerosol molar density (mole/m^3)\n')
	offset = 2 * len(species_names) + 2
    else:
	print "ERROR: unknown unit: %s" % unit
	sys.exit(1)
    f.write('set title "aerosol time history"\n')
    if unit == "num":
	f.write('plot "%s" using ($1/3600):2 title "total" with lines\n'
		% data_filename)
    else:
	first_time = True
	for i in species_nums:
	    if first_time:
		plot = "plot"
		first_time = False
	    else:
		plot = "replot"
	    f.write(plot + ' "%s" using ($1/3600):%d title "%s" with lines\n'
		    % (data_filename, i + offset, species_names[i - 1]))

def plot_gas_history(f, data_filename, species_nums, species_names):
    f.write('set xlabel "time (hr)"\n')
    f.write('set ylabel "gas concentration (ppb)\n')
    f.write('set title "gas time history"\n')
    first_time = True
    for i in species_nums:
	if first_time:
	    plot = "plot"
	    first_time = False
	else:
	    plot = "replot"
	f.write(plot + ' "%s" using ($1/3600):%d title "%s" with lines\n'
		% (data_filename, i + 1, species_names[i - 1]))

def plot_comp(f, data_filename):
    f.write('set xlabel "radius (m)"\n')
    f.write('set ylabel "proportion"\n')
    f.write('set cblabel "number density (#/m^3)"\n')
    f.write('set title "composition"\n')
    f.write('set key off\n')
    f.write('set logscale x\n')
    f.write('set pm3d map corners2color c1\n')
    f.write('set palette defined ( 0 0 0 1, 0.25 0 1 1, 0.5 0 1 0, 0.75 1 1 0, 1 1 0 0 )\n')
    f.write('splot "%s"\n' % data_filename)

def plot_comp_total(f, data_filename):
    f.write('set xlabel "proportion"\n')
    f.write('set ylabel "number density (#/m^3)"\n')
    f.write('set title "composition"\n')
    f.write('set key off\n')
    f.write('plot "%s" with histeps\n' % data_filename)

def plot_env(f, data_filename, env):
    env_fields = {'t': ['temperature', '(K)', "2"],
		       'rh': ['relative humidity', '(1)', "3"],
		       'p': ['pressure', '(kPa)', "($4/1e3)"],
		       'h': ['height', '(m)', "5"]}
    f.write('set xlabel "time (hr)"\n')
    f.write('set ylabel "%s %s"\n' % (env_fields[env[0]][0],
				      env_fields[env[0]][1]))
    if len(env) > 1:
	f.write('set y2label "%s %s"\n' % (env_fields[env[1]][0],
					   env_fields[env[1]][1]))
	f.write('set y2tics\n')
    f.write('set title "environment parameters"\n')
    f.write('plot "%s" using 1:%s axes x1y1 title "%s" with lines\n'
	    % (data_filename, env_fields[env[0]][2], env_fields[env[0]][0]))
    if len(env) > 1:
	f.write('replot "%s" using 1:%s axes x1y1 title "%s" with lines\n'
		% (data_filename, env_fields[env[1]][2], env_fields[env[1]][0]))

def plot_n_orig_part(f, data_filename):
    f.write('set xlabel "radius (m)"\n')
    f.write('set ylabel "number of original particles"\n')
    f.write('set cblabel "number"\n')
    f.write('set title "original particle number"\n')
    f.write('set key off\n')
    f.write('set logscale x\n')
    f.write('set pm3d map corners2color c1\n')
    f.write('set palette defined ( 0 1 1 1, 0.00001 0 0 1, 1 1 0 0 )\n')
    f.write('splot "%s"\n' % data_filename)

def main():
    (type, data_filename, unit, species, times, env) = process_args()
    if type in ["aero_binned", "aero_history", "gas_history"]:
	species_names = get_species_names(data_filename, type)
	print "Available species:"
	print_species_table([i+1 for i in range(len(species_names))],
			    species_names)
	species_nums = normalize_species(species, species_names)
    times = normalize_times(times)
    env = normalize_env(env)
    if type in ["aero_binned", "aero_history"]:
	if unit == "num":
	    print "Selected unit: number density"
	elif unit == "vol":
	    print "Selected unit: volume density"
	elif unit == "mass":
	    print "Selected unit: mass density"
	elif unit == "mole":
	    print "Selected unit: molar density"
	else:
	    print "ERROR: unknown unit: %s" % unit
	    sys.exit(1)
    if type in ["aero_binned", "aero_history", "gas_history"]:
	print "Selected species:"
	print_species_table(species_nums, species_names)
    if type == "env":
	env_field_names = {'t': 'temperature',
			   'rh': 'relative humidity',
			   'p': 'pressure',
			   'h': 'height'}
	print "Selected environment fields:"
	for e in env:
	    print "           %s" % env_field_names[e]
    #f = os.popen('gnuplot -persist', 'w')
    if type != "comp":
	f = open('plot.gp', 'w')
    if type == "aero_binned":
	plot_aero_binned(f, data_filename, unit, species_nums, species_names,
			 times)
    elif type == "aero_history":
	plot_aero_history(f, data_filename, unit, species_nums, species_names)
    elif type == "gas_history":
	plot_gas_history(f, data_filename, species_nums, species_names)
    elif type == "comp_gnuplot":
	plot_comp(f, data_filename)
    elif type == "comp_total":
	plot_comp_total(f, data_filename)
    elif type == "env":
	plot_env(f, data_filename, env)
    elif type == "n_orig_part_gnuplot":
	plot_n_orig_part(f, data_filename)
    else:
	print "ERROR: unknown type: %s" % type
	sys.exit(1)
    if type not in ["comp", "n_orig_part"]:
	f.write('set terminal postscript eps color\n')
	f.write('set output "plot.eps"\n')
	f.write('replot\n')
	f.flush()
	f.close()
	os.system('gnuplot -persist plot.gp')
	os.system('epstopdf plot.eps')
    
if __name__ == "__main__":
    main()
