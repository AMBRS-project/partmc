#!/usr/bin/env python
# Copyright (C) 2007 Matthew West
# Licensed under the GNU General Public License version 2 or (at your
# option) any later version. See the file COPYING for details.

import os, sys, re
from optparse import OptionParser
sys.path.insert(0, os.path.expanduser("~/.python"))
from pyx import *
from numpy import *

class data_dim():
    
    def __init__(self):
	self.name = None         # axis name
	self.grid_type = None    # "center" or "edge"
	self.data_type = None    # "string", "int", or "float"
	self.unit = None         # unit of grid_values
	self.grid_values = []    # grid points on axis
	self.grid_widths = []    # widths of grid cells
	self.grid_unit = None    # units of data values or None

class data_file():

    def __init__(self):
	self.name = None
	self.time = None
	self.index = None
	self.dims = []
	self.data = None

def load_data_file(filename):
    data = data_file()
    f = open(filename)
    f.readline()
    read_string(f, 'name', data.name)
    read_real(f, 'time', data.time)
    read_integer(f, 'index', data.index)
    read_integer(f, 'n_dim', n_dim)
    read_integer(f, 'unit_dim', unit_dim)
    for i_dim in range(n_dim):
	read_integer(f, 'dim', check_dim)
	check_index(check_dim, i_dim + 1)
	dim = data_dim()

hist_col_type_names = {
    "_n_orig_part": ["number of component particles", ""],
    "_comp": ["mixing state", "\\%"],
    "_kappa": ["critical supersaturation", "\\%"],
    "_absorb": ["absorption cross-section (m$^2$)", ""],
    "_scatter": ["scattering cross-section (m$^2$)", ""],
    "_extinct": ["extinction cross-section (m$^2$)", ""],
    }

env_field_names = {
    'temp': ['temperature', '(K)', 2],
    'rh': ['relative humidity', "", "($3*100)"],
    'press': ['pressure', '(kPa)', "($4/1e3)"],
    'height': ['height', '(m)', 5],
    }

time_unit_names = {
    'day': '$1/86400',
    'hour': '$1/3600',
    'min': '$1/60',
    'sec': '1',
    }

aerosol_species_titles = {
    "SO4_a": "SO$_4$",
    "NO3_a": "NO$_3$",
    "Cl_a": "Cl",
    "NH4_a": "NH$_4$",
    "MSA_a": "MSA",
    "ARO1_a": "ARO1",
    "ARO2_a": "ARO2",
    "ALK1_a": "ALK1",
    "OLE1_a": "OLE1",
    "API1_a": "API1",
    "API2_a": "API2",
    "LIM1_a": "LIM1",
    "LIM2_a": "LIM2",
    "CO3_a": "CO$_3$",
    "Na_a": "Na",
    "Ca_a": "Ca",
    "OIN_a": "OIN",
    "OC_a": "Organic carbon",
    "BC_a": "Black carbon",
    "H2O": "H$_2$O",
    }

gas_species_titles = {
    "H2SO4": "H$_2$SO$_4$",
    "HNO3": "HNO$_3$",
    "HCl": "HC$\ell$",
    "NH3": "NH$_3$",
    "NO2": "NO$_2$",
    "NO3": "NO$_3$",
    "N2O5": "N$_2$O$_5$",
    "HNO4": "HNO$_4$",
    "O3": "O$_3$",
    "O1D": "O$_1$D",
    "O3P": "O$_3$P",
    "HO2": "HO$_2$",
    "H2O2": "H$_2$O$_2$",
    "SO2": "SO$_2$",
    "CH4": "CH$_4$",
    "C2H6": "C$_2$H$_6$",
    "CH3O2": "CH$_3$O$_2$",
    "CH3OH": "CH$_3$OH",
    "CH3OOH": "CH$_3$OOH",
    "C2O3": "C$_2$O$_3$",
    "CH3SO2H": "CH$_3$SO$_2$H",
    "CH3SCH2OO": "CH$_3$SCH$_2$OO",
    "CH3SO2": "CH$_3$SO$_2$",
    "CH3SO3": "CH$_3$SO$_3$",
    "CH3SO2OO": "CH$_3$SO$_2$OO",
    "CH3SO2CH2OO": "CH$_3$SO$_2$CH$_2$OO",
    }

class listpalette(color.palette):

    def __init__(self, colorlist):
        color.palette.__init__(self)
        self.colorclass = colorlist[0][1].__class__
        self.colorlist = colorlist

    def getcolor(self, param):
	for i in range(len(self.colorlist)):
	    if self.colorlist[i][0] >= param:
		break
	else:
	    raise ValueError
	if i == 0:
	    i = 1
	# list[i-1] < param < list[i]
	alpha = (param - self.colorlist[i-1][0]) \
	    / (self.colorlist[i][0] - self.colorlist[i-1][0])
        colordict = {}
        for key in self.colorlist[0][1].color.keys():
            colordict[key] = alpha * self.colorlist[i][1].color[key] \
		+ (1 - alpha) * self.colorlist[i-1][1].color[key]
        return self.colorclass(**colordict)

def process_args():
    parser = OptionParser(usage = "usage: %prog [options] <datafiles>")
    parser.add_option("-u", "--unit", default = "num",
		      help = "Unit to plot with. Must be 'num', 'vol', " \
		      + "'mass' or 'mole'. [default: %default]")
    parser.add_option("-o", "--output", metavar = "FILE",
		      help = "Filename to write output to. [default: " \
		      + "<datafile>.pdf]")

    (options, args) = parser.parse_args()
    if len(args) < 1:
	parser.print_help()
	print "ERROR: must give at least one datafile argument"
	sys.exit(1)
    data_filenames = args
    return (data_filenames, parser)

def main():
    pass
    
if __name__ == "__main__":
    main()
