#!/usr/bin/env python
# Copyright (C) 2007 Matthew West
# Licensed under the GNU General Public License version 2 or (at your
# option) any later version. See the file COPYING for details.

import os, sys, re
from numpy import *

class data_dim():
    def __init__(self):
	self.name = None         # axis name
	self.grid_type = None    # "center" or "edge"
	self.data_type = None    # "string", "int", or "float"
	self.unit = None         # unit of grid_values
	self.grid_values = []    # grid points on axis
	self.grid_widths = []    # widths of grid cells
	self.grid_units = None   # units of data values or None

class data_file():
    def __init__(self):
	self.name = None         # name of the data-set
	self.time = None         # time (s) of the data-set
	self.index = None        # index of the data-set
	self.dims = []           # list of data_dim() objects
	self.data = None         # n-D array of data

def read_named(f, name):
    line = f.readline()
    data = line.split()
    if len(data) != 2:
	print "ERROR: expected 2 items on line: %s" % line
	sys.exit(1)
    if name != data[0]:
	print "ERROR: expected name %s on line: %s" % (name, line)
	sys.exit(1)
    return data[1]

def read_indexed_named(f, index, name):
    line = f.readline()
    data = line.split()
    if len(data) != 3:
	print "ERROR: expected 3 items on line: %s" % line
	sys.exit(1)
    if name != data[0]:
	print "ERROR: expected name %s on line: %s" % (name, line)
	sys.exit(1)
    try:
	check_index = int(data[1])
    except:
	print "ERROR: unable to convert index to integer: %s" % data[1]
    if index != check_index:
	print "ERROR: expected index %d but got: %d" (index, check_index)
	sys.exit(1)
    return data[2]

def read_integer(f, name):
    data = read_named(f, name)
    try:
	return int(data)
    except:
	print "ERROR: unable to convert to integer: %s" % data
	sys.exit(1)

def read_real(f, name):
    data = read_named(f, name)
    try:
	return float(data)
    except:
	print "ERROR: unable to convert to real: %s" % data
	sys.exit(1)

def read_string(f, name):
    return read_named(f, name)

def read_indexed_integer(f, index, name):
    data = read_indexed_named(f, indexed, name)
    try:
	return int(data)
    except:
	print "ERROR: unable to convert to integer: %s" % data
	sys.exit(1)

def read_indexed_real(f, index, name):
    data = read_indexed_named(f, indexed, name)
    try:
	return float(data)
    except:
	print "ERROR: unable to convert to float: %s" % data
	sys.exit(1)

def read_indexed_string(f, index, name):
    return read_indexed_named(f, indexed, name)

def read_comment(f, comment):
    line = f.readline()
    if line != ("%# %s\n" % comment):
	print "ERROR: expected comment %s but got %s: " (comment, line)
	sys.exit(1)

def read_unnamed_real(f):
    line = f.readline()
    try:
	return float(line)
    except:
	print "ERROR: unable to convert to float: %s" % line
	sys.exit(1)

def load_data_file(filename):
    f = open(filename)
    data = data_file()
    data.name = read_string(f, 'name')
    data.time = read_real(f, 'time')
    data.index = read_integer(f, 'index')
    n_dim = read_integer(f, 'n_dim')
    unit_dim = read_integer(f, 'unit_dim')
    for i_dim in range(n_dim):
	check_dim = read_integer(f, 'dim')
	check_index(check_dim, i_dim + 1)
	dim = data_dim()
	dim.name = read_string(f, 'name')
	dim.grid_type = read_string(f, 'grid_type')
	dim.data_type = read_string(f, 'data_type')
	dim.unit = read_string(f, 'unit')
	length = read_integer(f, 'length')
	if dim.grid_type == "center":
	    n_grid = length
	elif dim.grid_type == "edge":
	    n_grid = length + 1
	else:
	    print "ERROR: unknown grid_type: %s" % dim.grid_type
	    sys.exit(1)
	if i_dim == unit_dim - 1:
	    dim.grid_unit = []
	for i_grid in range(length):
	    if dim.data_type == "real":
		grid_value = read_indexed_real(f, i_grid + 1, 'grid')
	    elif dim.data_type == "string":
		grid_value = read_indexed_string(f, i_grid + 1, 'grid')
	    elif dim.data_type == "integer":
		grid_value = read_indexed_integer(f, i_grid + 1, 'grid')
	    else:
		print "ERROR: unknown data_type: %s" % dim.data_type
		sys.exit(1)
	    dim.grid_values.append(grid_value)
	    dim.grid_widths.append(read_indexed_real(f, i_grid + 1,
						     'grid_width'))
	    if i_dim == unit_dim - 1:
		dim.grid_units.append(read_indexed_string(f, i_grid + 1,
							  'unit'))
	data.dims.append(dim)
    read_comment(f, 'data values follow, row major order')
    data_shape = [dim.length for dim in data.dims]
    data.data = zeros(data_shape)
    for index in ndindex(data_shape):
	data.data(shape) = read_unnamed_real(f)
    return data
